import asyncio
# from aiogram import F
from aiogram import Router, types
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from handlers.logic import search_recipe, search_recipe_by_clas, insert_data
from aiogram.types import FSInputFile, KeyboardButton, ReplyKeyboardMarkup
router = Router()

### –¢—É—Ç –∑–Ω–∞—Ö–æ–¥—è—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞ ###


class Form(StatesGroup):
    food_class = State()
    poshuk_ingredient = State()
    my_receps = State()

"""–õ–æ–≥—ñ–∫–∞ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
@router.message(Command("start"))
async def cmd_start(message: types.Message):
    text = (
        "–ü—Ä–∏–≤—ñ—Ç —è –±—É–≤ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –∞–±–∏ –¥–æ–ø–æ–º–æ–≥—Ç–∏ —Ç–æ–±—ñ –∫—É–ª—ñ–Ω–∞—Ä–Ω–∏–º–∏ –ø–æ—Ä–∞–¥–∞–º–∏"
        )
    await message.answer(text)
    await asyncio.sleep(1)
    await cmd_menu(message)

@router.message(lambda message: message.text == '–ú–µ–Ω—é')
async def cmd_menu(message: types.Message):
    text1 = (
        "–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –≤–∞–º –¥—ñ—é"
        )

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    kb = [
        [KeyboardButton(text="–î–æ–≤—ñ–¥–Ω–∏–∫"), KeyboardButton(text="–ü–æ—à—É–∫ —Ä–µ—Ü–µ–ø—Ç—ñ–≤")],
        [KeyboardButton(text="–ü–æ—à—É–∫ —Ä–µ—Ü–µ–ø—Ç—ñ–≤ –∑–∞ —ñ–Ω–≥—Ä—ñ–¥—ñ—î–Ω—Ç–∞–º–∏"), KeyboardButton(text="–ú–æ—ó —Ä–µ—Ü–µ–ø—Ç–∏")],
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

    await asyncio.sleep(1)
    await message.answer(text1, reply_markup=keyboard)

@router.message(lambda message: message.text == '–î–æ–≤—ñ–¥–Ω–∏–∫')
async def process_with_puree(message: types.Message):
    """–¢—É—Ç —Ä–æ–∑–ø–∏—Å–∞–Ω–∞ –≤—Å—è–∫–∞ —Ö–µ—Ä–Ω—è –±—É–¥–µ"""
    text1 = "1.–∫–Ω–æ–ø–∫–∞ –≤ –º–µ–Ω—é —Ü–µ —Å–∞–º –¥–æ–≤—ñ–¥–Ω–∏–∫\n2.–ø–æ—à—É–∫ —Ä–µ—Ü–µ–ø—Ç—ñ–≤\n3.–ø–æ—à—É–∫ —Ä–µ—Ü–µ–ø—Ç—ñ–≤ –∑–∞ —ñ–Ω–≥—Ä—ñ–¥—ñ—î–Ω—Ç–∞–º–∏\n4.–º–æ—ó —Ä–µ—Ü–µ–ø—Ç–∏"
    text2 = "–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–ø–æ–º–æ–≥–∏ –Ω–∞–ø–∏—à—ñ—Ç—å –∞–¥–º—ñ–Ω—É @ds0903"
    kb = [
        [KeyboardButton(text="–ú–µ–Ω—é")],
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer(text1)
    await asyncio.sleep(2)
    await message.answer(text2, reply_markup=keyboard)

@router.message(lambda message: message.text == '–ü–æ—à—É–∫ —Ä–µ—Ü–µ–ø—Ç—ñ–≤')
async def cmd_poshuk(message: types.Message, state: FSMContext):
    """–û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è –ø–æ—à—É–∫—É —Ä–µ—Ü–µ–ø—Ç—ñ–≤"""

    kb = [
        [KeyboardButton(text="–°—É–ø–∏")],[KeyboardButton(text="–ù–∞–ø–æ—ñ")],[KeyboardButton(text="–ì—Ä–∏–ª—å")],
        [KeyboardButton(text="–ú–µ–Ω—é")],
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –±–∞–∂–∞–Ω–∏–π –∫–ª–∞—Å —Å—Ç—Ä–∞–≤ —ñ –±–æ—Ç –ø–æ–≤–µ—Ä–Ω–µ –≤–∞–º –≥–æ—Ç–æ–≤—ñ —Ä–µ—Ü–µ–ø—Ç–∏", reply_markup=keyboard)
    await state.set_state(Form.food_class)

    @router.message(lambda message: message.text == '–°—É–ø–∏', Form.food_class)
    async def cmd_sypi(message: types.Message):
        file_ids = []
        data = message.text
        response = await search_recipe_by_clas(data)
        for i in response:
            id, clas, name, recipes, about = i
            result = f"ID: {id}\nClass: {clas}\nName: {name}\nRecipes: {recipes}\nDescription: {about}"
            await asyncio.sleep(1)
            await message.reply(result, reply_markup=types.ReplyKeyboardRemove())

            """–ü–æ–∫–∏ —Ç–µ—Å—Ç–æ–≤–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ–∫"""
            # if id == 1:
            #     image_from_pc = FSInputFile("bot\handlers\photos\photo_2024-05-24_15-54-47.jpg")
            #     result = await message.answer_photo(
            #         image_from_pc, caption="—Ñ–æ—Ç–∫–∞ 1"
            #     )
            #     file_ids.append(result.photo[-1].file_id)
            # if id == 2:
            #     image_from_pc = FSInputFile("bot\handlers\photos\photo_2024-05-24_15-54-47.jpg")
            #     result = await message.answer_photo(
            #         image_from_pc, caption="—Ñ–æ—Ç–∫–∞ 2"
            #     )
            #     file_ids.append(result.photo[-1].file_id)
        await state.clear()
        asyncio.sleep(6)
        await cmd_menu(message)

    @router.message(lambda message: message.text == '–ì—Ä–∏–ª—å', Form.food_class)
    async def cmd_grill(message: types.Message):
        data = message.text
        response = await search_recipe_by_clas(data)
        for i in response:
            id, clas, name, recipes, about = i
            result = f"ID: {id}\nClass: {clas}\nName: {name}\nRecipes: {recipes}\nDescription: {about}"
            await asyncio.sleep(1)
            await message.reply(result, reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        asyncio.sleep(6)
        await cmd_menu(message)


    @router.message(lambda message: message.text == '–ù–∞–ø–æ—ñ', Form.food_class)
    async def cmd_napoi(message: types.Message):
        data = message.text
        response = await search_recipe_by_clas(data)
        for i in response:
            id, clas, name, recipes, about = i
            result = f"ID: {id}\nClass: {clas}\nName: {name}\nRecipes: {recipes}\nDescription: {about}"
            await asyncio.sleep(1)
            await message.reply(result, reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        asyncio.sleep(6)
        await cmd_menu(message)


@router.message(lambda message: message.text == '–ü–æ—à—É–∫ —Ä–µ—Ü–µ–ø—Ç—ñ–≤ –∑–∞ —ñ–Ω–≥—Ä—ñ–¥—ñ—î–Ω—Ç–∞–º–∏')
async def cmd_poshuk_ingredient(message: types.Message, state: FSMContext):

    await message.reply("–ù–∞–ø–∏—à—ñ—Ç—å —ñ–Ω–≥—Ä—ñ–¥—ñ—î–Ω—Ç–∏ –¥–ª—è —Å—Ç—Ä–∞–≤–∏:\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥ '–º–æ—Ä–∫–≤–∞' –∞–±–æ '—è–ª–æ–≤–∏–ß–ò–ù–ê'", reply_markup=types.ReplyKeyboardRemove())

    await state.set_state(Form.poshuk_ingredient)

    @router.message(Form.poshuk_ingredient)
    async def process_recipe_name(message: types.Message):

        recipe = message.text.split()
        recipe1 = await search_recipe(recipe)

        if recipe1:
            await message.answer(f"–†–µ—Ü–µ–ø—Ç—ñ–≤ –∑–∞ —ñ–Ω–≥—Ä—ñ–¥—ñ—î–Ω—Ç–∞–º–∏ '{recipe}': –∑–Ω–∞–π–¥–µ–Ω—ñ.")
            await state.clear()
            await asyncio.sleep(1)
            await cmd_menu(message)
        else:
            await message.answer(f"–†–µ—Ü–µ–ø—Ç—ñ–≤ –∑–∞ —ñ–Ω–≥—Ä—ñ–¥—ñ—î–Ω—Ç–∞–º–∏ '{recipe}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            await state.clear()
            await asyncio.sleep(1)
            await cmd_menu(message)

@router.message(lambda message: message.text == '–ú–æ—ó —Ä–µ—Ü–µ–ø—Ç–∏')
async def cmd_my_recipes(message: types.Message):


    kb = [
        [KeyboardButton(text="–í–∏–¥–∞–ª–∏—Ç–∏"), KeyboardButton(text="–í—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏")],
        [KeyboardButton(text="–î–æ–¥–∞—Ç–∏"), KeyboardButton(text="–ú–µ–Ω—é")],
    ]
    text = "–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –∫–µ—Ä—É–≤–∞—Ç–∏ —Å–≤–æ—ñÃà–º–∏ —Ä–µ—Ü–µ–ø—Ç–∞–º–∏"
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer(text, reply_markup=keyboard)

    @router.message(lambda message: message.text == '–î–æ–¥–∞—Ç–∏')
    async def cmd_dodat(message: types.Message, state: FSMContext):
        text = "–î–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–µ—Ü–µ–ø—Ç—É –Ω–∞–ø–∏—à—ñ—Ç—å –±—É–¥—å–ª–∞—Å–∫–∞ –π–æ–≥–æ –∫–ª–∞c, –Ω–∞–∑–≤—É —Ä–µ—Ü–µ–ø—Ç—É, —ñ–Ω–≥—Ä—ñ–¥—ñ—î–Ω—Ç–∏, —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é\n\n–û–±–æ–≤—å—è–∑–∫–æ–≤–æ –≤ —Ç–æ–º—É –ø–æ—Ä—è–¥–∫—É –≤ —è–∫–æ–º—É –Ω–∞–≤–µ–¥–µ–Ω–æ –≤ –ø—Ä–∏–∫–ª–∞–¥—ñ!\n\n"
        text1 = "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –∫–ª–∞—Å: '–°–∞–ª–∞—Ç–∏', –Ω–∞–∑–≤–∞: '—Å—ñ–ª—å—Å—å–∫–∏–π', —ñ–Ω–≥—Ä—ñ–¥—ñ—î–Ω—Ç–∏: '–º–æ—Ä–∫–≤–∞ —è–ª–æ–≤–∏–ß–ò–ù–ê', –æ–ø–∏—Å: '–û–ø–∏—Å —Ä–µ—Ü–µ–ø—Ç—É'"
        await message.reply(f"{text}{text1}", reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(Form.my_receps)

        @router.message(Form.my_receps)
        async def process_register(message: types.Message):

            data = message.text.split()
            response = await insert_data(data)
            await message.reply(response)
            await state.clear()
            await asyncio.sleep(2)
            await cmd_menu(message)





### –Ü–¥–µ—ó –Ω–∞ –º–∞–π–±—É—Ç–Ω—î

# await message.reply("–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!", reply_markup=types.ReplyKeyboardRemove())

# response1 = response[0]
#         id, clas, name, recipes, about = response1

#         result1 = f"ID: {id}\nClass: {clas}\nName: {name}\nRecipes: {recipes}\nDescription: {about}"
#         await message.reply(f"—Ä–µ–∑—É–ª—å—Ç–∞—Ç 1{result1}", reply_markup=types.ReplyKeyboardRemove())

#         await state.clear()

#         response2 = response[1]
#         id, clas, name, recipes, about = response2
#         result2 = f"ID: {id}\nClass: {clas}\nName: {name}\nRecipes: {recipes}\nDescription: {about}"
#         await message.answer(f"—Ä–µ–∑—É–ª—å—Ç–∞—Ç 2{result2}")

# @router.message(Command("poshuk"))
# async def cmd_poshuk(message: types.Message):
#     """–í–∏–∫–æ–Ω—É–≤–∞—Ç–∏–º–µ—Ç—å—Å—è –Ω–∞—à –ø–æ—à—É–∫ —Ä–µ—Ü–µ–ø—Ç—ñ–≤ –∑–∞ –Ω–∞–∑–≤–∞–º–∏"""

#     content = Text(
#         "–®–∞–Ω–æ–≤–Ω–∏–π, ",
#         Bold(message.from_user.full_name),
#         "–≤–≤–µ–¥—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –≤–∞–º —Ä–µ—Ü–µ–ø—Ç"
#     )
#     await message.answer(
#         **content.as_kwargs()
#     )

# @router.message(Command("hello"))
# async def cmd_hello(message: Message):
#     content = Text(
#         "Hello, ",
#         Bold(message.from_user.full_name)
#     )
#     await message.answer(
#         **content.as_kwargs()
#     )

    # await message.answer_dice(emoji="üé≤", parse_mode=ParseMode.HTML)


# @router.message(F.text.lower() == "test")
# async def cmd_hi(message: types.Message):

#     await message.answer("/dovidka")
#     await message.reply("–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!", reply_markup=types.ReplyKeyboardRemove())