import asyncio

from aiogram import Router, types
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from handlers.logic import (delete_data, get_all, insert_data, search_recipe,
                            search_recipe_by_clas)
from handlers.photos.photo_manager import photo_clas

router = Router()

### –¢—É—Ç –∑–Ω–∞—Ö–æ–¥—è—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞ ###


class Form(StatesGroup):
    food_class = State()
    poshuk_ingredient = State()
    my_receps = State()
    dodat = State()
    delete = State()
    description = State()


"""–õ–æ–≥—ñ–∫–∞ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""


@router.message(Command("start"))
async def cmd_start(message: types.Message):
    text = "–ü—Ä–∏–≤—ñ—Ç —è –±—É–≤ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –∞–±–∏ –¥–æ–ø–æ–º–æ–≥—Ç–∏ —Ç–æ–±—ñ –∫—É–ª—ñ–Ω–∞—Ä–Ω–∏–º–∏ –ø–æ—Ä–∞–¥–∞–º–∏"
    await message.answer(text)
    await asyncio.sleep(1)
    await cmd_menu(message)


@router.message(lambda message: message.text == "–ú–µ–Ω—é")
async def cmd_menu(message: types.Message):
    text1 = "–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –≤–∞–º –¥—ñ—é"

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    kb = [
        [KeyboardButton(text="–î–æ–≤—ñ–¥–Ω–∏–∫"), KeyboardButton(text="–ü–æ—à—É–∫ —Ä–µ—Ü–µ–ø—Ç—ñ–≤")],
        [KeyboardButton(text="–ü–æ—à—É–∫ —Ä–µ—Ü–µ–ø—Ç—ñ–≤ –∑–∞ —ñ–Ω–≥—Ä—ñ–¥—ñ—î–Ω—Ç–∞–º–∏")],
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

    await asyncio.sleep(1)
    await message.answer(text1, reply_markup=keyboard)


@router.message(lambda message: message.text == "–î–æ–≤—ñ–¥–Ω–∏–∫")
async def process_with_puree(message: types.Message):
    """–¢—É—Ç —Ä–æ–∑–ø–∏—Å–∞–Ω–∞ –≤—Å—è–∫–∞ —Ö–µ—Ä–Ω—è –±—É–¥–µ"""
    text1 = "1.–∫–Ω–æ–ø–∫–∞ –≤ –º–µ–Ω—é —Ü–µ —Å–∞–º –¥–æ–≤—ñ–¥–Ω–∏–∫\n2.–ø–æ—à—É–∫ —Ä–µ—Ü–µ–ø—Ç—ñ–≤\n3.–ø–æ—à—É–∫ —Ä–µ—Ü–µ–ø—Ç—ñ–≤ –∑–∞ —ñ–Ω–≥—Ä—ñ–¥—ñ—î–Ω—Ç–∞–º–∏"
    text2 = "–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–ø–æ–º–æ–≥–∏ –Ω–∞–ø–∏—à—ñ—Ç—å –∞–¥–º—ñ–Ω—É @ds0903"
    kb = [
        [KeyboardButton(text="–ú–µ–Ω—é")],
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer(text1)
    await asyncio.sleep(2)
    await message.answer("üë®‚Äçüíª")
    await asyncio.sleep(0.25)
    await message.answer(text2, reply_markup=keyboard)


@router.message(lambda message: message.text == "–ü–æ—à—É–∫ —Ä–µ—Ü–µ–ø—Ç—ñ–≤")
async def cmd_poshuk(message: types.Message, state: FSMContext):
    """–û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è –ø–æ—à—É–∫—É —Ä–µ—Ü–µ–ø—Ç—ñ–≤"""

    kb = [
        [KeyboardButton(text="–°—É–ø–∏")],
        [KeyboardButton(text="–¥–µ–°–ï–†–¢–ò")],
        [KeyboardButton(text="–ì—Ä–∏–ª—å")],
        [KeyboardButton(text="–ú–µ–Ω—é")],
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

    await message.answer(
        "–í–∏–±–µ—Ä—ñ—Ç—å –±–∞–∂–∞–Ω–∏–π –∫–ª–∞—Å —Å—Ç—Ä–∞–≤ —ñ –±–æ—Ç –ø–æ–≤–µ—Ä–Ω–µ –≤–∞–º –≥–æ—Ç–æ–≤—ñ —Ä–µ—Ü–µ–ø—Ç–∏",
        reply_markup=keyboard,
    )
    await state.set_state(Form.food_class)

# –®–∞–±–ª–æ–Ω –¥–ª—è —Ä–µ—Ü–µ–ø—Ç—ñ–≤

    @router.message(lambda message: message.text == "–°—É–ø–∏", Form.food_class)
    async def cmd_sypi(message: types.Message):
        data = message.text
        response = await search_recipe_by_clas(data)
        for i in response:                                          # –®–∞–±–ª–æ–Ω –¥–ª—è —Ä–µ—Ü–µ–ø—Ç—ñ–≤
            id, clas, about = i
            result = f"ID: {id}\nClass: {clas}\nDescription: {about}"
            await asyncio.sleep(1)
            await message.reply(result, reply_markup=types.ReplyKeyboardRemove())
            await photo_clas(message, about)

        await state.clear()
        await asyncio.sleep(3)
        await cmd_menu(message)

# –®–∞–±–ª–æ–Ω –¥–ª—è —Ä–µ—Ü–µ–ø—Ç—ñ–≤
    @router.message(lambda message: message.text == "–ì—Ä–∏–ª—å", Form.food_class)
    async def cmd_grill(message: types.Message):
        data = message.text
        response = await search_recipe_by_clas(data)
        for i in response:
            id, clas, about = i
            result = f"ID: {id}\nClass: {clas}\nDescription: {about}"
            await asyncio.sleep(1)
            await message.reply(result, reply_markup=types.ReplyKeyboardRemove())
            await photo_clas(message, about)

        await state.clear()
        await asyncio.sleep(3)
        await cmd_menu(message)

    @router.message(lambda message: message.text == "–¥–µ–°–ï–†—Ç–∏", Form.food_class)
    async def cmd_napoi(message: types.Message):
        data = message.text
        response = await search_recipe_by_clas(data)
        for i in response:
            id, clas, about = i
            result = f"ID: {id}\nClass: {clas}\nDescription: {about}"
            await asyncio.sleep(1)
            await message.reply(result, reply_markup=types.ReplyKeyboardRemove())
            await photo_clas(message, about)

        await state.clear()
        await asyncio.sleep(3)
        await cmd_menu(message)


@router.message(lambda message: message.text == "–ü–æ—à—É–∫ —Ä–µ—Ü–µ–ø—Ç—ñ–≤ –∑–∞ —ñ–Ω–≥—Ä—ñ–¥—ñ—î–Ω—Ç–∞–º–∏")
async def cmd_poshuk_ingredient(message: types.Message, state: FSMContext):

    await message.reply(
        "–ù–∞–ø–∏—à—ñ—Ç—å —ñ–Ω–≥—Ä—ñ–¥—ñ—î–Ω—Ç–∏ –¥–ª—è —Å—Ç—Ä–∞–≤–∏:\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥ '–º–æ—Ä–∫–≤–∞' –∞–±–æ '—è–ª–æ–≤–∏–ß–ò–ù–ê'",
        reply_markup=types.ReplyKeyboardRemove(),
    )

    await state.set_state(Form.poshuk_ingredient)


@router.message(Form.poshuk_ingredient)
async def process_recipe_name(message: types.Message, state: FSMContext):

    recipe = message.text.split()

    recipe1 = await search_recipe(recipe)

    if recipe1 != "–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É":
        await message.answer(
            f"–†–µ—Ü–µ–ø—Ç–∏ —è–∫—ñ –±—É–ª–∏ –∑–Ω–∞–π–¥–µ–Ω—ñ –∑–∞ —ñ–Ω–≥—Ä—ñ–¥—ñ—î–Ω—Ç–∞–º–∏ '{recipe}': –∑–Ω–∞–π–¥–µ–Ω—ñ."
        )
        for i in recipe1:
            await asyncio.sleep(1)
            await message.answer(f"–†–µ–ø–µ—Ü—Ç: {i}")
        await state.clear()
        await asyncio.sleep(1)
        await cmd_menu(message)
    else:
        await message.answer(f"–†–µ—Ü–µ–ø—Ç—ñ–≤ –∑–∞ —ñ–Ω–≥—Ä—ñ–¥—ñ—î–Ω—Ç–∞–º–∏ '{recipe}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        await state.clear()
        await asyncio.sleep(1)
        await cmd_menu(message)


@router.message(lambda message: message.text == "cmd_admin")
async def cmd_admin(message: types.Message, state: FSMContext):
    # await state.set_state(Form.my_receps)

    kb = [
        [KeyboardButton(text="cmd_delete")],
        [KeyboardButton(text="cmd_dodat")],
        [KeyboardButton(text="cmd_all")],
        [KeyboardButton(text="–ú–µ–Ω—é")],
    ]
    text = "–¢–∏ –ø—Ä–æ—Ç—Ä–∞–ø–∏–≤ –≤ —Å–µ–∫—Ä–µ—Ç–Ω–µ –º–µ–Ω—é!\n–¢—É—Ç —Ç–∏ –º–æ–∂–µ—à –¥–æ–¥–∞—Ç–∏/–≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Ä–µ—Ü–µ–ø—Ç–∏"
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer(text, reply_markup=keyboard)

    @router.message(lambda message: message.text == "cmd_dodat")
    async def cmd_dodat(message: types.Message, state: FSMContext):
        text = "–î–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–µ—Ü–µ–ø—Ç—É –Ω–∞–ø–∏—à—ñ—Ç—å –±—É–¥—å–ª–∞—Å–∫–∞ —Å–ø–æ—á–∞—Ç–∫—É –π–æ–≥–æ –∫–ª–∞c."
        text1 = "–ó –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —î –ª–∏—à 3 –∫–ª–∞—Å–∏.\n–°—É–ø–∏\n–ì—Ä–∏–ª—å\n–¥–µ–°–ï–†–¢–ò"
        await message.reply(f"{text}", reply_markup=types.ReplyKeyboardRemove())
        await asyncio.sleep(1)
        await message.answer(f"{text1}")
        await state.set_state(Form.dodat)

        @router.message(Form.dodat)
        async def process_register1(message: types.Message, state: FSMContext):
            about1 = message.text
            if about1 == "–°—É–ø–∏" or message.text == "–ì—Ä–∏–ª—å" or message.text == "–¥–µ–°–ï–†–¢–ò":
                await state.update_data(about1=about1)
                await message.reply(
                    f"–ù–∞–ø–∏—à—ñ—Ç—å —Ç–µ–ø–µ—Ä –æ–ø–∏—Å —Ä–µ—Ü–µ–ø—Ç—É\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –°—É–ø —Å–æ–ª—è–Ω–∫–∞ –∑ –º–æ—Ä–∫–≤–æ–π"
                )
                await state.set_state(Form.description)
            else:
                await message.answer(
                    f"–¢–∞–∫–æ–≥–æ –ö–ª–∞–∞—Å—É —Ä–µ—Ü–µ–ø—Ç—É –Ω–µ —ñ—Å–Ω—É—î!\n\n{text1}\n\n–í–≤–æ–¥—å –∑–∞–Ω–æ–≤–æ —Ç–µ–ø–µ—Ä cmd_dodat"
                )
                await state.clear()

        @router.message(Form.description)
        async def process_register2(message: types.Message, state: FSMContext):

            about2 = message.text
            user_data = await state.get_data()
            about1 = user_data["about1"]
            data_full = (about1, about2)

            response = await insert_data(data_full)

            await message.reply(response)
            await asyncio.sleep(2)
            await state.clear()
            await cmd_admin(message, state)

    @router.message(lambda message: message.text == "cmd_delete")
    async def cmd_delete(message: types.Message, state: FSMContext):
        text = "–î–ª—è –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–µ—Ü–µ–ø—Ç—É –Ω–∞–ø–∏—à—ñ—Ç—å id —Ä–µ—Ü–µ–ø—Ç—É\nP.S.(–Ω–æ–º–µ—Ä —Ä–µ—Ü–µ–ø—Ç—É –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤ –º–µ–Ω—é –≤—Å—ñ —Ä–µ—Ü–µ–ø—Ç–∏)"
        await message.reply(f"{text}", reply_markup=types.ReplyKeyboardRemove())

        await state.set_state(Form.delete)

        @router.message(Form.delete)
        async def process_register(message: types.Message):

            data = message.text
            response = await delete_data(data)
            await message.reply(response)
            await state.clear()
            await asyncio.sleep(2)
            await cmd_admin(message, state)

    @router.message(lambda message: message.text == "cmd_all")
    async def cmd_all(message: types.Message, state: FSMContext):
        all = get_all()
        for result in all:
            await message.reply(f"{result}")
            await asyncio.sleep(1)
            if result == all[-1]:
                await message.reply("–¶–µ –±—É–ª–∞ –≤—Å—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è")
                await asyncio.sleep(1)
                await cmd_admin(message, state)


### –Ü–¥–µ—ó –Ω–∞ –º–∞–π–±—É—Ç–Ω—î

# –ø—Ä–∏–∫–ª–∞–¥ —è–∫ –º–æ–∂–Ω–∞ –≤—Å—Ç–∞–≤–ª—è—Ç–∏ –µ–º–æ–¥–∑—ñ
# –º–∞–∂–∞–Ω–æ –ª–∏—à–∞—Ç–∏ –ª–µ–≥–∫—É –∑–∞—Ç—Ä–∏–º–∫—É –∞–±–∏ —Å–∏–ª—å–Ω–æ –Ω–µ —Ä—ñ–∑–∞–ª–æ –æ—á—ñ
#     await message.answer("üë®‚Äçüíª")
#     await asyncio.sleep(0.25)
# –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
# await message.reply("test", reply_markup=types.ReplyKeyboardRemove())