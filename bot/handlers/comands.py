import asyncio
from aiogram import F
# from datetime import datetime
from aiogram import Router, types
from aiogram.types import Message, CallbackQuery
from aiogram.filters.command import Command
from aiogram.utils.formatting import Text, Bold
from handlers.logic import sqlite3
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
router = Router()

### –¢—É—Ç –∑–Ω–∞—Ö–æ–¥—è—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞ ###


"""–¢—É—Ç –æ–ø–∏—Å–∞–Ω—ñ –≤—Å—ñ –∫–æ–º–∞–Ω–¥–∏"""

@router.message(lambda message: message.text == '–ú–µ–Ω—é')
async def cmd_start(message: types.Message):
    text1 = (
        "–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –≤–∞–º –∫–Ω–æ–ø–∫—É"
        )
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    kb = [
        [KeyboardButton(text="–î–æ–≤—ñ–¥–Ω–∏–∫"), KeyboardButton(text="–ü–æ—à—É–∫ —Ä–µ—Ü–µ–ø—Ç—ñ–≤")],
        [KeyboardButton(text="–ü–æ—à—É–∫ —Ä–µ—Ü–µ–ø—Ç—ñ–≤ –∑–∞ —ñ–Ω–≥—Ä—ñ–¥—ñ—î–Ω—Ç–∞–º–∏"), KeyboardButton(text="–ú–æ—ó —Ä–µ—Ü–µ–ø—Ç–∏")],
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    
    await asyncio.sleep(1)
    await message.answer(text1, reply_markup=keyboard)

@router.message(lambda message: message.text == '–î–æ–≤—ñ–¥–Ω–∏–∫')
async def process_with_puree(message: types.Message):
    """–¢—É—Ç —Ä–æ–∑–ø–∏—Å–∞–Ω–∞ –≤—Å—è–∫–∞ —Ö–µ—Ä–Ω—è –±—É–¥–µ"""
    text1 = "1.–∫–Ω–æ–ø–∫–∞ –≤ –º–µ–Ω—é —Ü–µ —Å–∞–º –¥–æ–≤—ñ–¥–Ω–∏–∫\n2.–ø–æ—à—É–∫ —Ä–µ—Ü–µ–ø—Ç—ñ–≤\n3.–ø–æ—à—É–∫ —Ä–µ—Ü–µ–ø—Ç—ñ–≤ –∑–∞ —ñ–Ω–≥—Ä—ñ–¥—ñ—î–Ω—Ç–∞–º–∏\n4.–º–æ—ó —Ä–µ—Ü–µ–ø—Ç–∏"
    text2 = "–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–ø–æ–º–æ–≥–∏ –Ω–∞–ø–∏—à—ñ—Ç—å –∞–¥–º—ñ–Ω—É @ds0903"
    kb = [
        [KeyboardButton(text="–ú–µ–Ω—é")],
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer(text1)
    await asyncio.sleep(2)
    await message.answer(text2, reply_markup=keyboard)


async def search_recipe(recipe_name):
    """–ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –ø–æ –ø–æ–∏—Å–∫—É —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
    conn = sqlite3.connect('bot_main.db')
    cursor = conn.cursor()

    cursor.execute("SELECT * FROM recipes WHERE name = ?", (recipe_name,))
    recipe = cursor.fetchone()

    cursor.close()
    conn.close()

    return recipe


"""–õ–æ–≥—ñ–∫–∞ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
@router.message(Command("start"))
async def cmd_start(message: types.Message):
    text = (
        "–ü—Ä–∏–≤—ñ—Ç —è –±—É–≤ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –∞–±–∏ –¥–æ–ø–æ–º–æ–≥—Ç–∏ —Ç–æ–±—ñ –∫—É–ª—ñ–Ω–∞—Ä–Ω–∏–º–∏ –ø–æ—Ä–∞–¥–∞–º–∏"
        )
    text1 = (
        "–î–ª—è –ø—Ä–æ–≤–æ–¥–æ–≤–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–π–¥–∏ –≤ –º–µ–Ω—é"
        )

    kb = [
        [KeyboardButton(text="–ú–µ–Ω—é")],
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

    await message.answer(text)
    await asyncio.sleep(1)
    await message.answer(text1, reply_markup=keyboard)


@router.message(lambda message: message.text == '–ü–æ—à—É–∫ —Ä–µ—Ü–µ–ø—Ç—ñ–≤')
async def cmd_poshuk(message: types.Message):
    """–û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è –ø–æ—à—É–∫—É —Ä–µ—Ü–µ–ø—Ç—ñ–≤"""

    kb = [
        [KeyboardButton(text="–ú–µ–Ω—é")],
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    # await asyncio.sleep(1)
    await message.reply("–ù–∞–ø–∏—à—ñ—Ç—å –∫–ª–∞—Å —Å—Ç—Ä–∞–≤–∏:\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥ '–°–∞–ª–∞—Ç' –∞–±–æ '–∫–æ–∫—Ç–µ–ª—ñ'", reply_markup=types.ReplyKeyboardRemove())
    # await message.answer("–ù–∞–ø–∏—à—ñ—Ç—å –∫–ª–∞—Å —Å—Ç—Ä–∞–≤–∏:\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥ '–°–∞–ª–∞—Ç' –∞–±–æ '–∫–æ–∫—Ç–µ–ª—ñ'")
    await asyncio.sleep(2)
    await message.answer("–î–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–ú–µ–Ω—é'", reply_markup=keyboard)

    @router.message()
    async def process_recipe_name(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–º–µ–Ω–∏ —Ä–µ—Ü–µ–ø—Ç–∞"""

        recipe_name = message.text
        recipe = await search_recipe(recipe_name)

        if recipe:
            await message.answer(f"–†–µ—Ü–µ–ø—Ç—ñ–≤ –∑–∞ –Ω–∞–∑–≤–æ—é '{recipe_name}': –∑–Ω–∞–π–¥–µ–Ω—ñ.")
        else:
            await message.answer(f"–†–µ—Ü–µ–ø—Ç—ñ–≤ –∑–∞ –Ω–∞–∑–≤–æ—é '{recipe_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.")


@router.message(lambda message: message.text == '–ü–æ—à—É–∫ —Ä–µ—Ü–µ–ø—Ç—ñ–≤ –∑–∞ —ñ–Ω–≥—Ä—ñ–¥—ñ—î–Ω—Ç–∞–º–∏')
async def cmd_poshuk_ingreee(message: types.Message):
    """–û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è –ø–æ—à—É–∫—É —Ä–µ—Ü–µ–ø—Ç—ñ–≤ –∑–∞ —ñ–Ω–≥—Ä—ñ–¥—ñ—î–Ω—Ç–∞–º–∏"""

    kb = [
        [KeyboardButton(text="–ú–µ–Ω—é")],
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.reply("–ù–∞–ø–∏—à—ñ—Ç—å —ñ–Ω–≥—Ä—ñ–¥—ñ—î–Ω—Ç–∏ –¥–ª—è —Å—Ç—Ä–∞–≤–∏:\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥ '–º–æ—Ä–∫–≤–∞' –∞–±–æ '—è–ª–æ–≤–∏–ß–ò–ù–ê'", reply_markup=types.ReplyKeyboardRemove())
    await asyncio.sleep(2)
    await message.answer("–î–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–ú–µ–Ω—é'", reply_markup=keyboard)

    @router.message()
    async def process_recipe_name(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–º–µ–Ω–∏ —Ä–µ—Ü–µ–ø—Ç–∞"""

        recipe_name = message.text
        recipe = await search_recipe(recipe_name)

        if recipe:
            await message.answer(f"–†–µ—Ü–µ–ø—Ç—ñ–≤ –∑–∞ —ñ–Ω–≥—Ä—ñ–¥—ñ—î–Ω—Ç–∞–º–∏ '{recipe_name}': –∑–Ω–∞–π–¥–µ–Ω—ñ.")
        else:
            await message.answer(f"–†–µ—Ü–µ–ø—Ç—ñ–≤ –∑–∞ —ñ–Ω–≥—Ä—ñ–¥—ñ—î–Ω—Ç–∞–º–∏ '{recipe_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")


@router.message(lambda message: message.text == '–ú–æ—ó —Ä–µ—Ü–µ–ø—Ç–∏')
async def cmd_my_recipes(message: types.Message):
    """–û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è –ø–æ—à—É–∫—É —Ä–µ—Ü–µ–ø—Ç—ñ–≤ –∑–∞ —ñ–Ω–≥—Ä—ñ–¥—ñ—î–Ω—Ç–∞–º–∏"""

    kb_menu = [
        [KeyboardButton(text="–ú–µ–Ω—é")],
    ]

    # kb = [
    #     [KeyboardButton(text="–í–∏–¥–∞–ª–∏—Ç–∏"), KeyboardButton(text="–í—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏")],
    #     [KeyboardButton(text="–î–æ–¥–∞—Ç–∏"), KeyboardButton(text="–ú–æ—ó —Ä–µ—Ü–µ–ø—Ç–∏")],
    # ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb_menu, resize_keyboard=True)
    await message.reply("–ù–∞–ø–∏—à—ñ—Ç—å —ñ–Ω–≥—Ä—ñ–¥—ñ—î–Ω—Ç–∏ –¥–ª—è —Å—Ç—Ä–∞–≤–∏:\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥ '–º–æ—Ä–∫–≤–∞' –∞–±–æ '—è–ª–æ–≤–∏–ß–ò–ù–ê'", reply_markup=types.ReplyKeyboardRemove())
    await asyncio.sleep(2)
    await message.answer("–î–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–ú–µ–Ω—é'", reply_markup=keyboard)

    @router.message()
    async def process_recipe_name(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–º–µ–Ω–∏ —Ä–µ—Ü–µ–ø—Ç–∞"""

        recipe_name = message.text
        recipe = await search_recipe(recipe_name)

        if recipe:
            await message.answer(f"–†–µ—Ü–µ–ø—Ç—ñ–≤ –∑–∞ —ñ–Ω–≥—Ä—ñ–¥—ñ—î–Ω—Ç–∞–º–∏ '{recipe_name}': –∑–Ω–∞–π–¥–µ–Ω—ñ.")
        else:
            await message.answer(f"–†–µ—Ü–µ–ø—Ç—ñ–≤ –∑–∞ —ñ–Ω–≥—Ä—ñ–¥—ñ—î–Ω—Ç–∞–º–∏ '{recipe_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")


### –Ü–¥–µ—ó –Ω–∞ –º–∞–π–±—É—Ç–Ω—î

# await message.reply("–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!", reply_markup=types.ReplyKeyboardRemove())

# @router.message(Command("poshuk"))
# async def cmd_poshuk(message: types.Message):
#     """–í–∏–∫–æ–Ω—É–≤–∞—Ç–∏–º–µ—Ç—å—Å—è –Ω–∞—à –ø–æ—à—É–∫ —Ä–µ—Ü–µ–ø—Ç—ñ–≤ –∑–∞ –Ω–∞–∑–≤–∞–º–∏"""

#     content = Text(
#         "–®–∞–Ω–æ–≤–Ω–∏–π, ",
#         Bold(message.from_user.full_name),
#         "–≤–≤–µ–¥—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –≤–∞–º —Ä–µ—Ü–µ–ø—Ç"
#     )
#     await message.answer(
#         **content.as_kwargs()
#     )

# @router.message(Command("hello"))
# async def cmd_hello(message: Message):
#     content = Text(
#         "Hello, ",
#         Bold(message.from_user.full_name)
#     )
#     await message.answer(
#         **content.as_kwargs()
#     )

    # await message.answer_dice(emoji="üé≤", parse_mode=ParseMode.HTML)


# @router.message(F.text.lower() == "test")
# async def cmd_hi(message: types.Message):

#     await message.answer("/dovidka")
#     await message.reply("–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!", reply_markup=types.ReplyKeyboardRemove())